#############################################################################
##
#W  transducer.xml
#Y  Copyright (C) 2017                                Fernando Flores Brito
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="Transducer">
<ManSection>
  <Oper Name = "Transducer" Arg = "m, n, P, L"/>
  <Returns>A transducer.</Returns>
  <Description>
    For two positive integers <A>m</A>, and <A>n</A>, a dense list of dense
    lists of integers <A>P</A>, and a dense list of dense lists of lists
    of integers <A>L</A>, such that <A>P</A> and <A>L</A> have the same size,
    and each of their elements have size equal to <A>m</A>, the operation
    <C>Transducer(<A>m, n, P, L</A>)</C> returns a transducer with input
    alphabet <C>[0 .. m - 1]</C>, output alphabet <C>[0 .. n - 1]</C>,
    transition function <A>P</A>, and output function <A>L</A>. 
    This list <A>P</A> has the property that 
    <C><A>P</A>[currentstate][inputletter + 1]</C> is the state transitioned
    to when <C>inputletter</C> is read from state <C>currentstate</C>; where
    <C>currentstate</C> is an integer from <C>[1 .. Size(<A>P</A>)]</C>, and
    <C>inputletter</C> is an integer from <C>[0 .. m-1]</C>.
    Similarly, <A>L</A> has the property that 
    <C><A>L</A>[currentstate][inputletter + 1]</C>, is the word written when
    <C>inputletter</C> is read from state <C>currentstate</C>;
    where <C>currentstate</C> and <C>inputletter</C> are as before.
    The words that the transducer outputs can be input as either a dense list
    or a periodic list (we use the peiodic lists from the fr package, see
    https://gap-packages.github.io/fr/doc/chap11.html#X816865747DD51C11
    for more information on periodic lists).
    A transducer which can write an infinite periodic list upon reading a 
    a letter must transition to a state from which only the the empty word
    can be written.

    <Example><![CDATA[
gap> T := Transducer(2, 2, [[2, 3], [2, 3], [2, 3]],
> 			   [[[], []], [[0], [0]], [[1], [1]]]);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols,
  and 3 states.>
  ]]></Example>
 </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="TransducerFunction">
<ManSection>
  <Oper Name = "TransducerFunction" Arg = "T, word, m"/>
  <Returns>A list.</Returns>
  <Description>
    For a transducer <A>T</A>, a dense or periodic list <A>word</A>, and a 
    positive integer <A>m</A> such that it is a state of the transducer, the 
    operation <C>TransducerFunction(<A>T, word, m</A>)</C> returns a list 
    containing the word obtained when <A>word</A> is read by <A>T</A> from
    state <A>m</A>, and the state that is reached after reading <A>word</A>
    from state <A>m</A> (the function returns 0 instead of a state when an
    infinite word is read).
    <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> TransducerFunction(T, [0, 1, 0], 1);
[ [ 0, 1 ], 2 ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="XFunction">
  <ManSection><Heading>XFunction</Heading>
    <Oper Name = "TransitionFunction" Arg = "T"/>
    <Oper Name = "OutputFunction" Arg = "T"/>
    <Returns>A list.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation
      <C>TransitionFunction(<A>T</A>)</C> displays the list representing the
      transition function of <A>T</A>, and the operation
      <C>OutputFunction(<A>T</A>)</C> displays the list representing the output
      function of <A>T</A>.
      <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> TransitionFunction(T);
[ [ 1, 2 ], [ 2, 1 ] ]
gap> OutputFunction(T);
[ [ [ 0 ], [  ] ], [ [ 1 ], [ 0, 1 ] ] ]
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="XAlphabet">
  <ManSection><Heading>XAlphabet</Heading>
    <Oper Name = "InputAlphabet" Arg = "T"/>
    <Oper Name = "OutputAlphabet" Arg = "T"/>
    <Returns>A list.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation
      <C>InputAlphabet(<A>T</A>)</C> returns the list representing the
      input alphabet of <A>T</A>, and the operation
      <C>OutputAlphabet(<A>T</A>)</C> returns the list representing the output
      alphabet of <A>T</A>.
      <Example><![CDATA[
gap> P := Transducer(2, 3, [[1, 2], [2, 1]], [[[0], [2]], [[1], [0, 1]]]);;
gap> InputAlphabet(P);
[ 0, 1 ]
gap> OutputAlphabet(P);
[ 0 .. 2 ]
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="NrStates">
  <ManSection>
    <Oper Name = "NrStates" Arg = "T"/>
    <Returns>A positive integer.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation <C>NrStates(<A>T</A>)</C> returns
      the number of states of the transducer <A>T</A>.
      <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> NrStates(T);
2
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="States">
  <ManSection>
    <Oper Name = "States" Arg = "T"/>
    <Returns>A list of integers.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation <C>States(<A>T</A>)</C> returns
      a list representing the set of states of the transducer <A>T</A>.
      <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 1]], [[[0], []], [[1], [0, 1]]]);;
gap> States(T);
[ 1, 2 ]
]]></Example>
    </Description>
  </ManSection>

<#/GAPDoc>
<#GAPDoc Label="NrXSymbols">
  <ManSection><Heading>NrXSymbols</Heading>
    <Oper Name = "NrInputSymbols" Arg = "T"/>
    <Oper Name = "NrOutputSymbols" Arg = "T"/>
    <Returns>A positive integer.</Returns>
    <Description>
      For a transducer <A>T</A>, the operation <C>NrInputSymbols(<A>T</A>)</C>
      returns the number of symbols of the input alphabet of <A>T</A>, and the
      operation <C>NrOutputSymbols(<A>T</A>)</C> returns the number of symbols
      of the output alphabet of <A>T</A>.

      <Example><![CDATA[
gap> T := Transducer(2, 3, [[1, 2], [2, 1]], [[[0], []], [[1], [2, 1]]]);;
gap> NrInputSymbols(T); NrOutputSymbols(T);
2
3
]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IdentityTransducer">
  <ManSection>
    <Oper Name = "IdentityTransducer" Arg = "n"/>
    <Returns>A transducer</Returns>
    <Description>
      For a positive integer <A>n</A>, the operation 
      <C>IdentityTransducer(<A>n</A>)</C> returns a transducer with input and 
      output alphabet size <A>n</A>. The transducer has 1 state and when a word
      is read from this state, the same word is output.
      <Example><![CDATA[
gap> T := IdentityTransducer(3);
<transducer with input alphabet on 3 symbols, output alphabet on
3 symbols, and 1 state.>
gap> EqualTransducers(T, Transducer(3, 3, [[1, 1, 1]], [[[0], [1], [2]]]));
true
]]></Example>
   </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="AlphabetChangeTransducer">
  <ManSection>
    <Oper Name = "AlphabetChangeTransducer" Arg = "m, n"/>
    <Returns>A transducer</Returns>
    <Description>
      For two positive integers <A>m, n</A>, the operation 
      <C>AlphabetChangeTransducer(<A>m, n</A>)</C> returns a transducer with
      input alphabet size <A>m</A> and output alphabet size <A>n</A>.
     <Alt Only="LaTeX">\\  </Alt>

      This transducer is never degenerate and always induces a homeomorphism
      h_{m, n} from the Cantor space of infinite words over the alphabet of
      size <A>m</A> to the Cantor space of infinite words over the alphabet
      of size <A>n</A>.
      These homeomorphisms have the property that the composit of h_{a, b}
      with h_{b, c} is equal to h_{a, c} for all a, b, and c.
     <Alt Only="LaTeX">\\  </Alt>

      More specifically, the homeomorphism h_{2, n} is the one obtained by
      viewing infinite words over the alphabet <C>0, 1</C> as infinite words
      over the strings <C>0, 10, 110, ... , 1^{n-2}0, 1^{n-1}</C> and then 
      replacing these strings with <C>0, 1, ..., n-1</C> respectively.
      Generally, the homeomorphism h_{m, n} is then the composite of the 
      inverse of h_{2, m} with h_{2, n}.
      <Example><![CDATA[
gap> T := Transducer(2, 4, [[1, 2], [1, 3], [1, 1]],
> [[[0], []], [[1], []], [[2], [3]]]);;
gap> EqualTransducers(T, AlphabetChangeTransducer(2, 4));
true
gap> T:= Transducer(2, 2, [ [ 3, 1 ], [ 2, 3 ], [ 1, 1 ] ],    
> [ [ [ 1 ], [ 0 ] ], [ [ 1 ], [ 1 ] ], [ [ 0 ], [ 1 ] ] ]);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols,
 and 3 states.>
gap> TConjugate := T^AlphabetChangeTransducer(2, 3);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
 and 6 states.>
gap> TConjugate2 := TConjugate^AlphabetChangeTransducer(3, 2);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols,
 and 12 states.>
gap> TConjugate2 = T;
true
]]></Example>
   </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="RandomTransducer">
  <ManSection>
    <Oper Name = "RandomTransducer" Arg = "m, n"/>
    <Returns>A transducer</Returns>
    <Description>
      For positive integers <A>m, n</A>, the operation 
      <C>RandomTransducer(<A>m, n</A>)</C> returns a random transducer with
      input and output alphabet of size <A>m</A> and <A>n</A> states.

      All transition functions are equally likely. For each state and letter
      pair (q, l), the chances that the word written when l is read from state
      q has length 0, 1, 2, 3, ... are 1/4, 3/8, 3/16, 3/32 ... respectively.
      Each word of a fixed length has the same chance of being written.
      <Example><![CDATA[
gap> RandomTransducer(3, 5);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
 and 5 states.>
]]></Example>
   </Description>
</ManSection>
<#/GAPDoc>
