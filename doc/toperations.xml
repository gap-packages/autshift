#############################################################################
##
#W  toperations.xml
#Y  Copyright (C) 2017                     Fernando Flores Brito, Luke Elliott
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="InverseTransducer">
<ManSection>
  <Oper Name = "InverseTransducer" Arg = "T"/>
  <Returns>A transducer.</Returns>
  <Description>
    For an invertible transducer <A>T</A> whose first state is a homeomorphism
    state, the operation <C>InverseTransducer(<A>T</A>)</C> returns the minimal
    transducer whose initial state (state 1) defines the inverse of this 
    homeomorphism. Please note that it is the user's responsibility to ensure that
    the first state is a homeomorphism state.
    <Example><![CDATA[
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2], [0], [1]],
>                      [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);;
gap> g := InverseTransducer(f);;
gap> w := TransducerFunction(f, [0, 1], 1)[1];
[ 2, 0 ]
gap> TransducerFunction(g, w, 1)[1];
[ 0, 1 ]
]]></Example>
   In the figure one can see images of the transducers <C>f</C> and <C>g</C> respectively from the above example. 
  These images can be generated with the commands <C>Splash(DotTransducer(f))</C> and <C>Splash(DotTransducer(g))</C> respectively.
 <Alt Only="LaTeX">
\begin{figure}[!tbp]
  \centering
  \begin{minipage}[b]{0.4\textwidth}
    \includegraphics[width=7cm]{inversetransducerexamplepreinverse.pdf}
    \caption{Transducer f.}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.4\textwidth}
  \includegraphics[width=7cm]{inversetransducerexamplepostinverse.pdf}
    \caption{Transducer g.}
  \end{minipage}
\end{figure}
 </Alt>
 </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="TransducerProduct">
<ManSection>
  <Oper Name = "TransducerProduct" Arg = "T, P"/>
  <Returns>A transducer.</Returns>
  <Description>
    For two transducers <A>T</A> and <A>P</A>, the operation
    <C>TransducerProduct(<A>T, P</A>)</C> returns the product of the 
    transducers <A>T</A> and <A>P</A>. The product command can also be
    run with *.

    Moreover, if n is an integer, then the <A>T</A>^n returns the product of
    <A>T</A> with itself <A>n</A> times (n may only be negative if <A>T</A> is
    invertible). If <A>T</A> is invertible, then the product 
    <A>T</A>^-1*<A>P</A>*<A>T</A> can be input as <A>P</A>^<A>T</A>.
    <Example><![CDATA[
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2], [0], [1]],
>                      [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 3 states.>
gap> ff := TransducerProduct(f, f);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 9 states.>
]]></Example>
   In the figure one can see images of the transducers <C>f</C> and <C>ff</C> 
  respectively from the above example. 
  These images can be generated with the commands 
  <C>Splash(DotTransducer(f))</C> and <C>Splash(DotTransducer(ff))</C>
  respectively.
 <Alt Only="LaTeX">
\begin{figure}[!tbp]
  \centering
  \begin{minipage}[b]{0.4\textwidth}
    \includegraphics[width=7cm]{inversetransducerexamplepreinverse.pdf}
    \caption{Transducer f.}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.4\textwidth}
  \includegraphics[width=7cm]{transducerproductexample.pdf}
    \caption{Transducer ff.}
  \end{minipage}
\end{figure}
 </Alt>
 </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="RemoveIncompleteResponseFromStates">
<ManSection>
  <Oper Name = "RemoveIncompleteResponseFromStates" Arg = "T"/>
  <Returns>A transducer.</Returns>
  <Description>
    For a transducer <A>T</A> that has states with incomplete response, the
    operation <C>RemoveIncompleteResponseFromStates(<A>T</A>)</C> returns a
    transducer <C>P</C> that has one more state than <A>T</A>(acting as the 
    new initial state) and which has no states with incomplete response. 
    State <C>s</C> of the transducer <A>T</A> is state
    <C>s + 1</C> of the transducer <C>P</C>.
    <Example><![CDATA[
gap> t := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2], [0], []],
>                           [[1, 0, 0], [1], [1]], [[0, 2], [2], [0]]]);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 3 states.>
gap> p := RemoveIncompleteResponseFromStates(t);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 4 states.>
gap> TransducerFunction(t, [2], 1)[1]; TransducerFunction(t, [1], 2)[1];
[  ]
[ 1 ]
gap> TransducerFunction(p, [2], 2)[1];
[ 1 ]
]]></Example>
   In the figure one can see images of the transducers <C>t</C> and <C>p</C>
  respectively from the above example.
  These images can be generated with the commands
  <C>Splash(DotTransducer(t))</C> and <C>Splash(DotTransducer(p))</C>
  respectively.
<Alt Only="LaTeX">
\begin{figure}[!tbp]
  \centering
  \begin{minipage}[b]{0.4\textwidth}
    \includegraphics[width=7cm]{incompleteresponceexamplepre.pdf}
    \caption{Transducer t.}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.4\textwidth}
  \includegraphics[width=7cm]{incompleteresponceexamplepost.pdf}
    \caption{Transducer p.}
  \end{minipage}
\end{figure}
 </Alt>
 </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="RemoveInaccessibleStates">
<ManSection>
  <Oper Name = "RemoveInaccessibleStates" Arg = "T"/>
  <Returns>A transducer.</Returns>
  <Description>
    For a transducer <A>T</A>, the operation
    <C>RemoveInaccessibleStates(<A>T</A>)</C> returns the transducer that is
    obtained by removing the states that are not accesssible from state 1.
    <Example><![CDATA[
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2], [0], [1]],
>                      [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 3 states.>
gap> ff := TransducerProduct(f, f);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 9 states.>
gap> m := RemoveInaccessibleStates(ff);
<transducer with input alphabet on 3 symbols, output alphabet on 3 symbols,
  and 6 states.>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="CombineEquivalentStates">
<ManSection>
  <Oper Name = "CombineEquivalentStates" Arg = "T"/>
  <Returns>A transducer.</Returns>
  <Description>
    For a transducer <A>T</A>, the operation
    <C>CombineEquivalentStates(<A>T</A>)</C> returns the transducer that is
    obtained by identifying states from which all finite words write the same word.
    <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 3], [2, 1], [1, 1], [1, 3]], [[[0], [0]],
> 			   [[1, 1], [0]], [[0], [0, 1]], [[0], [0]]]);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols,
and 4 states.>
gap> T2 := CombineEquivalentStates(T);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols, 
and 3 states.>
gap> OutputFunction(T);
[ [ [ 0 ], [ 0 ] ], [ [ 1, 1 ], [ 0 ] ], [ [ 0 ], [ 0, 1 ] ], [ [ 0 ], [ 0 ] ] ]
gap> TransitionFunction(T);
[ [ 1, 3 ], [ 2, 1 ], [ 1, 1 ], [ 1, 3 ] ]]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="MinimalTransducer">
<ManSection>
  <Oper Name = "MinimalTransducer" Arg = "T"/>
  <Returns>A transducer.</Returns>
  <Description>
	  Every transducer has a minimal omega-equivalent form (this transducer
	  produces the same outputs on all infinite length inputs as the original).
	  One arrives at this form by first removing inaccessible states, removing 
	  incomplete response from all states, and combining equivalent states. Those
	  three operations are described above. For a transducer <A>T</A>, the operation
          <C>MinimalTransducer(<A>T</A>)</C> returns the transducer's minimal
	  omega-equivalent form.

        <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 3], [2, 1], [1, 1], [1, 3]], [[[0], [0]],
>                          [[1, 1], [0]], [[0], [0, 1]], [[0], [0]]]);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols,
and 4 states.>
gap> M := MinimalTransducer(T);
<transducer with input alphabet on 2 symbols, output alphabet on 2 symbols, 
and 3 states.>
gap> OutputFunction(M);
[ [ [ 0, 0, 0 ], [ 0, 0 ] ], [ [ 0 ], [  ] ], [ [ 0, 0 ], [ 1, 0, 0 ] ] ]
gap> TransitionFunction(M);
[ [ 2, 3 ], [ 2, 3 ], [ 2, 2 ] ]
]]></Example>
 </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="CopyTransducerWithInitialState">
<ManSection>
  <Oper Name = "CopyTransducerWithInitialState" Arg = "T, m"/>
  <Returns>A transducer.</Returns>
  <Description>
    For a transducer <A>T</A> and a positive integer <A>m</A>, the operation
    <C>CopyTransducerWithInitialState(<A>T, m</A>)</C> returns the transducer
    that is obtained by relabeling the states of <A>T</A> such that state
    <A>m</A> becomes state 1, but is otherwise equivalent to <A>T</A>.
    More specifically, the states 1, 2, ..., m are permuteded cyclically (so
    the the order of the states other than m is preserved).
    <Example><![CDATA[
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2], [0], [1]],
>                      [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);;
gap> p := CopyTransducerWithInitialState(f, 3);;
gap> TransducerFunction(f, [0, 1, 0], 3);
[ [ 0, 2, 0, 2 ], 1 ]
gap> TransducerFunction(p, [0, 1, 0], 1);
[ [ 0, 2, 0, 2 ], 2 ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsInjectiveTransducer">
<ManSection>
  <Attr Name="IsInjectiveTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
    For a transducer <A>T</A>, the attribute
    <C>IsInjectiveTransducer(<A>T</A>)</C> returns <C>true</C> if the map 
    <A>T</A> defined by its initial state (the state labelled 1) is 
    injective, and <C>false</C> otherwise.

<Example><![CDATA[
gap> T := Transducer(2, 2, [[2, 4], [3, 6], [3, 2], [5, 7], [5, 4],
>      [6, 6], [7, 7]], [[[0], []], [[0, 1], [1, 0, 1]], [[1, 1, 1],
>      [1, 0]], [[0, 0], [0, 1, 0]], [[0, 0, 0], [1, 1]], [[0], [1]],
>      [[0], [1]]]);;
gap> IsInjectiveTransducer(T);
false
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2],
>      [0], [1]], [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);;
gap> IsInjectiveTransducer(f);
true
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="TransducerConstantStateOutputs">
<ManSection>
  <Oper Name = "TransducerConstantStateOutputs" Arg = "T"/>
  <Returns>A list.</Returns>
  <Description>
    A state of a trasducer is called constant if it induces a constant map 
    from the space of infinite words in its input alphabet to the space of
    infinite words in its output alphabet.

    For a non-degenerate transducer <A>T</A>, the operation 
    <C>TransducerConstantStateOutputs(<A>T</A>)</C> returns a list containing
    two lists. The first is a list of the constant states of <A>T</A>. The 
    second is a list of the values taken by those states.
    
    Such a value is represented as a string "v(w)*" where v and w are finite 
    strings in the output alphabet of <A>T</A>. The string "v(w)*" represents
    the infinite word vwwwwww... (v and w are always chosen to be as short as
    possible).
    <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [2, 2]], [[[1], [1, 1]], [[1], [1, 1]]]);;
gap> TransducerConstantStateOutputs(T);
[ [ 1, 2 ], [ "(1)*", "(1)*" ] ]
gap> T := Transducer(2, 3, [[2, 3], [2, 3], [2, 3]], [[[2, 0], [2]],
> [[1, 1, 0], [1, 1]], [[0], [0, 1, 1]]]);;
gap> T := Transducer(2, 2, [[1, 2], [2, 2]], [[[0], [1, 1]], [[1], [1, 1]]]);;
gap> TransducerConstantStateOutputs(T);                                       
[ [ 2 ], [ "(1)*" ] ]
gap> TransducerConstantStateOutputs(T);
[ [ 1, 2, 3 ], [ "2(011)*", "(110)*", "(011)*" ] ]
gap> T := Transducer(2, 2, [[3, 3], [1, 1], [2, 1]], [[[1], []],
> [[0, 1, 1, 1], [0]], [[0], [1]]]);;
gap> TransducerConstantStateOutputs(T);
[ [  ], [  ] ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsSurjectiveTransducer">
<ManSection>
  <Attr Name="IsSurjectiveTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
    For a transducer <A>T</A>, the attribute
    <C>IsSurjectiveTransducer(<A>T</A>)</C> returns <C>true</C> if the map
    <A>T</A> defined by its initial state (the state labelled 1) is
    surjective, and <C>false</C> otherwise.
<Example><![CDATA[
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2],
>      [0], [1]], [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);;
gap> IsSurjectiveTransducer(f);
true
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="IsBijectiveTransducer">
<ManSection>
  <Attr Name="IsBijectiveTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
    For a transducer <A>T</A>, the attribute <C>IsBijectiveTransducer(<A>T</A>)</C>
    returns <C>true</C> if <A>T</A> is a bijective transducer, and <C>false</C> otherwise.

<Example><![CDATA[
gap> T := Transducer(2, 2, [[2, 4], [3, 6], [3, 2], [5, 7], [5, 4], [6, 6],
>  [7, 7]], [[[0], []], [[0, 1], [1, 0, 1]], [[1, 1, 1], [1, 0]], [[0, 0],
>  [0, 1, 0]], [[0, 0, 0], [1, 1]], [[0], [1]], [[0], [1]]]);;
gap> IsBijectiveTransducer(T);
false
gap> f := Transducer(3, 3, [[1, 1, 2], [1, 3, 2], [1, 1, 2]], [[[2], [0], [1]],
> [[0, 0], [], [1]], [[0, 2], [2], [0, 1]]]);;
gap> IsBijectiveTransducer(f);
true
gap> T := Transducer(2, 2, [[3, 2], [4, 4], [4, 4], [4, 4]], [[[], []],
> [[0, 1], [1, 1]], [[0, 0], [1, 0]], [[0], [1]]]);;
gap> IsBijectiveTransducer(T);
true
gap> T := Transducer(2, 2, [[1, 2], [3, 4], [1, 5], [1, 6], [3, 4], [1, 6]],
> [[[0, 1, 0], []], [[1, 1], [0]], [[0, 1, 0], []], [[], [1, 0, 1, 0]],
> [[1], [0]], [[], [1, 0]]]);;
gap> IsBijectiveTransducer(T);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsSynchronousTransducer">
<ManSection>
  <Attr Name="IsSynchronousTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
    A transducer is called "Synchronous" if when it reads a finite word from any state, 
    it always outputs a finite word of the same length.

    For a transducer <A>T</A>, the attribute <C>IsSynchronousTransducer(<A>T</A>)</C>
    returns <C>true</C> if <A>T</A> is a synchronous transducer, and <C>false</C> otherwise.

<Example><![CDATA[
gap> T := Transducer(3, 3, [[1, 2, 1], [3, 3, 3], [1, 3, 2]],
> [[[1], [2], [1]], [[0], [1], [2]], [[0], [0], [1]]]);;
gap> IsSynchronousTransducer(T);
true
gap> T := Transducer(3, 3, [[1, 2, 1], [3, 3, 3], [1, 3, 2]],
> [[[1], [2], [1]], [[0], [1], [2, 1]], [[0], [0], [1]]]);;
gap> IsSynchronousTransducer(T);
false
gap> T := Transducer(2, 2, [[1, 2], [4, 3], [1, 2], [2, 1]],
> [[[1], [1]], [[1], [0]], [[0], [0]], [[1], [0]]]);;
gap> IsSynchronousTransducer(T);
true
gap> T := Transducer(2, 2, [[1, 2], [4, 3], [1, 2], [2, 1]],
> [[[], [1]], [[1], [0]], [[0], [1]], [[0], [0]]]);;
gap> IsSynchronousTransducer(T);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsMinimalTransducer">
<ManSection>
  <Attr Name="IsMinimalTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
    A non-degenerate transducer <A>T</A> is called "minimal" if it satisfies the following
    three properties:
     <Alt Only="LaTeX">\\  </Alt>
    1. Every state of <A>T</A> can be reached from the inital state of <A>T</A>(that is from state 1). 
     <Alt Only="LaTeX">\\  </Alt>
    2. If w is a word in the input alphabet of <A>T</A> and s is a state of <A>T</A>, then
    the word written when w is read from state s is equal to the longest common prefix of the infinite
    words which can be wriiten (from the state s) by reading an infinite word with prefix w.
     <Alt Only="LaTeX">\\  </Alt> 
    3. All the states of <A>T</A> define different maps from the space of infinite words in the input alphabet
    of <A>T</A> to the space of infinite words in the output alphabet of <A>T</A>.
     <Alt Only="LaTeX">\\  </Alt>
    For a transducer <A>T</A>, the attribute <C>IsMinimalTransducer(<A>T</A>)</C>
    returns <C>true</C> if <A>T</A> is a minimal transducer, and <C>false</C> otherwise (with the following caveat).

     <Alt Only="LaTeX">\\  </Alt>
    Caveat: Using the standard definitions outside this package, it is possible to have a minimal transducer which can write an infinite but 
    eventually periodic word by reading a finite word. 
    As the tranducers in this package don't allow this, we accomodate
    for these cases (breaking the second condition above) by having the transducer write the non-periodic part of the 
    infinite words and then transitioning to a state which always transitions to itself and writes the periodic part
    of the infinite word when any letter is read.
     <Alt Only="LaTeX">\\  </Alt>
    Each non-degenerate transducer has a unique minimal omega-equivalent form (modulo the above caveat) which can be computed with the 
    operation "MinimalTransducer".

<Example><![CDATA[
gap> T := Transducer(3, 3, [[3, 4, 3], [1, 3, 1], [1, 3, 3], [2, 2, 3]],
> [[[2], [2], [0]], [[2, 0, 2, 1], [0, 0], []], [[], [2, 0], [1]],
> [[], [2], [1, 1, 0, 1, 0]]]);;
gap> IsMinimalTransducer(T);
true
gap> M := MinimalTransducer(T);;
gap> IsMinimalTransducer(M);
true
gap> IsMinimalTransducer(CopyTransducerWithInitialState(M, 2));
true
gap> T := Transducer(3, 3, [[3, 2, 1], [3, 3, 1], [2, 2, 1]],
> [[[1, 0], [], [0]], [[], [], [0]], [[2], [2, 2, 1], [2, 2]]]);;
gap> IsMinimalTransducer(T);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>




<#GAPDoc Label="IsDegenerateTransducer">
<ManSection>
  <Attr Name="IsDegenerateTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
    A transducer is said to be "degenerate" if there is an infinite word in the
    input alphaber which can be read from its initial state (state 1) such that
    the resulting output is finite.
    For a transducer <A>T</A>, the attribute
    <C>IsDegenerateTransducer(<A>T</A>)</C> returns <C>true</C> if <A>T</A> is
    a degenerate transducer, and <C>false</C> otherwise.

<Example><![CDATA[
gap> T := Transducer(2, 2, [[2, 2], [1, 3], [2, 1]], [[[0], [0]],
> [[0, 1, 0, 0, 0, 1], []], [[0, 0, 0], [0]]]);;
gap> IsDegenerateTransducer(T);
false
gap> T := Transducer(3, 3, [[1, 2, 2], [3, 2, 3], [1, 3, 3]], [[[2, 2],
> [2, 2, 2, 2, 1, 1, 0, 1], [2, 0]], [[], [0, 1], [2]], [[1], [1], []]]);;
gap> IsDegenerateTransducer(T);
true
gap> T := Transducer(3, 3, [[1, 1, 3], [3, 1, 1], [2, 3, 2]],
> [[[0, 2, 2], [0], [2, 2]], [[], [0], [0]], [[2], [1, 2], []]]);;
gap> IsDegenerateTransducer(T);
true
gap> T := Transducer(5, 3, [[1, 1, 1, 1, 1], [1, 1, 1, 1, 2]],
> [[[0], [1], [2, 0], [2, 1], [2, 2]], [[1], [2, 0], [2, 1],
> [2, 2, 0], [2, 2]]]);;
gap> IsDegenerateTransducer(T);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="TransducerImageAutomaton">
<ManSection>
  <Oper Name = "TransducerImageAutomaton" Arg = "T"/>
  <Returns>An Automaton.</Returns>
  <Description>
	  For a transducer <A>T</A>, the operation 
	  <C>TransducerImageAutomaton(<A>T</A>)</C> returns an automaton object
	  (https://www.gap-system.org/Manuals/pkg/automata/doc/chap2.html#X821C3B3687B1F2FF)
	  which accepts the language of finite words which are prefixes of the
	  words which can be written from the initial state 1 of <A>T</A>.
    <Example><![CDATA[
gap> T := Transducer(3, 3, [[3, 2, 3], [1, 3, 1], [1, 3, 1]],
> [[[1, 1], [0], [2]], [[1], [1], []], [[2, 0], [0, 1, 0], []]]);;
gap> String(TransducerImageAutomaton(T));
"Automaton(\"epsilon\",7,\"012@\",[ [ [ 2 ], [ ], [ 6 ], [ ], [ 1 ], [ ], [ 3 \
] ], [ [ 4 ], [ 1, 3 ], [ ], [ 3 ], [ ], [ 7 ], [ ] ], [ [ 3 ], [ ], [ 5 ], [ \
], [ ], [ ], [ ] ], [ [ ], [ 1 ], [ 1 ], [ ], [ ], [ ], [ ] ] ],[ 1 ],[ 1 .. 7\
 ]);;"
gap> T := Transducer(2, 2, [[2, 3], [5, 1], [4, 5], [2, 5], [3, 3]],
> [[[0], [0]], [[0, 1, 0, 0, 0, 1], [0, 0, 0]], [[], [0]],
> [[], []], [[0], [0]]]);;
gap> String(TransducerImageAutomaton(T));
"Automaton(\"epsilon\",12,\"01@\",[ [ [ 2, 3 ], [ 6, 11 ], [ 5 ], [ ], [ 3 ], \
[ ], [ 8 ], [ 9 ], [ 10 ], [ ], [ 12 ], [ 1 ] ], [ [ ], [ ], [ ], [ ], [ ], [ \
7 ], [ ], [ ], [ ], [ 5 ], [ ], [ ] ], [ [ ], [ ], [ 4 ], [ 2, 5 ], [ ], [ ], \
[ ], [ ], [ ], [ ], [ ], [ ] ] ],[ 1 ],[ 1 .. 12 ]);;"
gap> T := Transducer(3, 4, [[1, 1, 2], [1, 1, 3], [1, 1, 1]],
> [[[0], [1], []], [[2], [3,0], [3]], [[1], [2], [3]]]);;
gap> String(TransducerImageAutomaton(T));
"Automaton(\"epsilon\",4,\"0123@\",[ [ [ 1 ], [ ], [ ], [ 1 ] ], [ [ 1 ], [ ],\
 [ 1 ], [ ] ], [ [ ], [ 1 ], [ 1 ], [ ] ], [ [ ], [ 3, 4 ], [ 1 ], [ ] ], [ [ \
2 ], [ ], [ ], [ ] ] ],[ 1 ],[ 1 .. 4 ]);;"
]]></Example>
The following images correspond to the first of the transducers in the above example and can be generated with the commands "Splash(DotTransducer(T))" and "DrawAutomaton(TransducerImageAutomaton(T))" respectively.
<Alt Only="LaTeX">
\begin{figure}[!tbp]
  \centering
  \begin{minipage}[b]{0.4\textwidth}
    \includegraphics[width=7cm]{imageautomatontransducer.pdf}
    \caption{Transducer.}
  \end{minipage}
  \hfill
  \begin{minipage}[b]{0.4\textwidth}
  \includegraphics[width=7cm]{imageautomatonautomaton.pdf}
    \caption{Corresponding Automaton.}
  \end{minipage}
\end{figure}
 </Alt>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsomorphicInitialTransducers">
<ManSection>
  <Attr Name="IsomorphicInitialTransducers" Arg="T1, T2"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
	  For transducers <A>T1</A> and <A>T2</A>, with the same input and output
	  alphabets, the operation <C>IsomorphicInitialTransducers(<A>T1</A>, <A>T2</A>)</C>
	  returns <C>true</C> if and only if there is a bijection from the states of
	  <A>T1</A> to the states of <A>T2</A> which preserves transitions, outputs and the
	  initial state 1.
<Example><![CDATA[
gap> T := Transducer(2, 3, [[1, 3], [2, 3], [3, 3]], [[[1], [2]], [[1], [2]],
> [[0, 0], [1, 0]]]);;
gap> T2 := CopyTransducerWithInitialState(T, 2);;
gap> T3 := CopyTransducerWithInitialState(T, 3);;
gap> T4 := CopyTransducerWithInitialState(T3, 3);;
gap> T5 := Transducer(2, 2, [[1, 1], [2, 2], [3, 3]],
> [[[], []], [[], []],[[], []]]);;
gap> T6 := Transducer(3, 2, [[1, 1, 1], [2, 2, 2], [3, 3, 3]],
> [[[], [], []], [[], [], []], [[], [], []]]);;
gap> IsomorphicInitialTransducers(T, T2);
true
gap> IsomorphicInitialTransducers(T, T3);
false
gap> IsomorphicInitialTransducers(T, T4);
true
gap> IsomorphicInitialTransducers(T, T5);
false
gap> IsomorphicInitialTransducers(T, T6);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>


<#GAPDoc Label="OmegaEquivalentTransducers">
<ManSection>
  <Attr Name="OmegaEquivalentTransducers" Arg="T1, T2"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
	  For non-degenerate transducers <A>T1</A> and <A>T2</A>, with the same input
	  and output alphabets, the operation 
	  <C>OmegaEquivalentTransducers(<A>T1</A>, <A>T2</A>)</C> returns <C>true</C>
	  if and only if <A>T1</A> and <A>T2</A> induce the same continuous maps
	  from the infinite words in their input alphabets to the infinite words in
	  their output alphabets (recall that the states we use to define these maps
	  are the states labelled 1).

	  Alternatively one can write <A>T1</A>=<A>T2</A> instead of 
	  <C>OmegaEquivalentTransducers(<A>T1</A>, <A>T2</A>)</C>.

<Example><![CDATA[
gap> T := Transducer(2, 2, [[2, 2], [3, 1], [3, 3], [5, 2], [2, 1]],
> [[[1, 0], [0, 0]], [[1], []], [[0], [1]], [[1], [1]], [[], [0, 0]]]);;
gap> M := MinimalTransducer(T);;
gap> OmegaEquivalentTransducers(T, M);
true
gap> T = M;
true
gap> T := Transducer(2, 3, [[1, 3], [2, 3], [3, 3]], [[[1], [2]], [[1], [2]],
> [[0, 0], [1, 0]]]);;
gap> T2 := CopyTransducerWithInitialState(T, 2);;
gap> T3 := CopyTransducerWithInitialState(T, 3);;
gap> T4 := CopyTransducerWithInitialState(T3, 3);;
gap> OmegaEquivalentTransducers(T, T2);
true
gap> OmegaEquivalentTransducers(T, T3);
false
gap> T = T4;
true
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="EqualTransducers">
<ManSection>
  <Attr Name="EqualTransducers" Arg="T1, T2"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
          For transducers <A>T1</A> and <A>T2</A>, the operation
          <C>EqualTransducers(<A>T1</A>, <A>T2</A>)</C> returns <C>true</C>
	  if and only if <A>T1</A> and <A>T2</A> have the same input alphabets,
	  output alphabets, states, transition function and write function.

	  Note that the operation "=" checks omega equivalence as opposed to running
	  this operation.
	  
<Example><![CDATA[
gap> T := Transducer(2, 3, [[1, 3], [2, 3], [3, 3]], [[[1], [2]], [[1], [2]],
> [[0, 0], [1, 0]]]);;
gap> T2 := CopyTransducerWithInitialState(T, 2);;
gap> T3 := CopyTransducerWithInitialState(T, 3);;
gap> T4 := CopyTransducerWithInitialState(T3, 3);;
gap> EqualTransducers(T, T2);
true
gap> EqualTransducers(T, T3);
false
gap> EqualTransducers(T, T4);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>



<#GAPDoc Label="TransducerOrder">
<ManSection>
  <Attr Name="TransducerOrder" Arg="T"/>
  <Returns> A positive integer.</Returns>
  <Description>
	  The input must be a transducer <A>T</A> with the same input and 
	  output alphabet, which induces a homeomorphism on the set of infinite
	  words over its alphabet (using 1 as the initial state).
	  
	  If this homeomorphism has finite order, then its order is returned. 
	  If this homeomorphism has infinite order, the operation will
	  not terminate.
<Example><![CDATA[
gap> T := IdentityTransducer(5);;
gap> TransducerOrder(T);
1
gap> T := Transducer(2, 2, [[1, 2], [1, 3], [1, 3]], [[[1, 0], []], [[0],
> [1, 1]], [[0], [1]]]);;
gap> TransducerOrder(T);
2
gap> T := Transducer(5, 5, [[1, 1, 1, 1, 1]], [[[1], [0], [3], [4], [2]]]);;
gap> TransducerOrder(T);
6
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>



<#GAPDoc Label="IsSynchronizingTransducer">
<ManSection>
  <Attr Name="IsSynchronizingTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
	  For a transducer <A>T</A>, the operation 
	  <C>IsSynchronizingTransducer(<A>T</A>)</C> returns <C>true</C>
	  if <A>T</A> is synchronizing and <C>false</C> otherwise.	  
	
	  A transducer <A>T</A> is said to be synchronizing if there is a
	  non-negative integer k such that: for all words w in the input 
	  alphabet of <A>T</A> and all states q of <A>T</A>, the state reached
	  when w is read from q is dependant only on the last k letters of w
	  (the reached state is independant of q and the other letters of w).
	  <Example><![CDATA[
gap> T := Transducer(2, 2, [[1, 2], [1, 3], [1, 3]], [[[1, 0], []], [[0],
> [1, 1]], [[0], [1]]]);;
gap> IsSynchronizingTransducer(T);
true
gap> T := Transducer(2, 2, [[2, 3], [3, 4], [3, 2], [3, 4]],
> [[[1], [1, 0, 1]], [[1], []], [[1], [0, 1]], [[1], [0]]]);;
gap> IsSynchronizingTransducer(T);
true
gap> T := Transducer(3, 3, [[1, 2, 1], [3, 3, 3], [1, 3, 2]],
> [[[1], [2], [1]], [[0], [1], [2, 1]], [[0], [0], [1]]]);;
gap> IsSynchronizingTransducer(T);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>



<#GAPDoc Label="TransducerSynchronizingLength">
<ManSection>
  <Attr Name="TransducerSynchronizingLength" Arg="T"/>
  <Returns>A non-negative integer.</Returns>
  <Description>
	  For a synchronizing transducer <A>T</A>, the operation 
	  <C>TransducerSynchronizingLength(<A>T</A>)</C> returns the 
	  synchronzing length of <A>T</A>. If <A>T</A> is not sychronizing,
	  then the operation instead returns infinity.	  
	
	  A transducer <A>T</A> is said to be synchronizing if there is a
	  non-negative integer k such that: for all words w in the input 
	  alphabet of <A>T</A> and all states q of <A>T</A>, the state reached
	  when w is read from q is dependant only on the last k letters of w
	  (the reached state is independant of q and the other letters of w).
	  This minmum such k is called the synchronizing length of <A>T</A>. 
<Example><![CDATA[
gap> T := IdentityTransducer(4);;
gap> TransducerSynchronizingLength(T);
0
gap> T := Transducer(2, 2, [[1, 2], [1, 3], [1, 3]], [[[1, 0], []], [[0],
> [1, 1]], [[0], [1]]]);;
gap> TransducerSynchronizingLength(T);
2
gap> T := Transducer(3, 3, [[1, 2, 1], [3, 3, 3], [1, 3, 2]],
> [[[1], [2], [1]], [[0], [1], [2, 1]], [[0], [0], [1]]]);;
gap> TransducerSynchronizingLength(T);
infinity
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>



<#GAPDoc Label="IsBisynchronizingTransducer">
<ManSection>
  <Attr Name="IsBisynchronizingTransducer" Arg="T"/>
  <Returns><C>true</C> or <C>false</C>.</Returns>
  <Description>
          For a transducer <A>T</A>, the operation 
	  <C>IsBisynchronizingTransducer(<A>T</A>)</C> returns <C>true</C>
	  if <A>T</A> is bisynchronizing and <C>false</C> otherwise.	  

	  A transducer <A>T</A> is said to be bisynchronizing if it is 
	  synchronizing and has a synchronizing inverse.

	  Note that while we don't in the definition insist on a 
	  bisynchronizing transducer having a common input and output alphabet
	  size, one can show that all bisynchronizing transducers do have a 
	  common input and output alphabet size.
<Example><![CDATA[
gap> T := IdentityTransducer(4);;
gap> IsBisynchronizingTransducer(T);
true
gap> T := Transducer(2, 2, [[1, 2], [1, 3], [1, 3]], [[[1, 0], []], [[0],
> [1, 1]], [[0], [1]]]);;
gap> IsBisynchronizingTransducer(T);
true
gap> T := Transducer(2, 2, [[2, 3], [3, 4], [3, 2], [3, 4]],
> [[[1], [1, 0, 1]], [[1], []], [[1], [0, 1]], [[1], [0]]]);;
gap> IsBisynchronizingTransducer(T);
false
gap> T := Transducer(3, 3, [[1, 2, 1], [3, 3, 3], [1, 3, 2]],
> [[[1], [2], [1]], [[0], [1], [2, 1]], [[0], [0], [1]]]);;
gap> IsBisynchronizingTransducer(T);
false
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>



